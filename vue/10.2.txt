1.live server即时浏览插件。

2.Vue是一个JavaScript框架，能简化DOM操作，响应式的数据驱动。

3.el设置挂载点:通过css选择器，设置Vue实例管理的元素，此时el命中元素的内部，
  使用模板语法（两个大括号）修饰的部分，就会被data中同名的数据替换。

4.Vue实例的作用范围：Vue会管理el选项命中的元素及其内部的后代元素，
  可以使用其他的选择器，但是建议使用ID选择器，
  可以使用其他的双标签，不能使用HTML和Body标签。

5.data数据对象:Vue中用到的数据定义在data中，data中可以写复杂类型的数据
  渲染复杂类型数据时，遵守js的语法，如：对象的.语法，数组的索引语法

6.Vue指令：
  v-text设置标签的文本值(textContent),默认写法会替换全部内容，
  简写为{{}}，使用差值表达式{{}}可以替换指定内容。
  v-html设置元素的innerHtml，内容中有html结构会被解析为标签。
  解析文本用v-text，解析html结构使用v-html。
  v-on为元素绑定事件，事件名不需要写on，指令可以简写为@，绑定的方法定义在methods属性中，
  方法内部通过this关键字可以访问定义在data中的数据。

  案例（计数器）：data中定义数据num，methods中添加两个方法add和sub，
                用v-text将num设置给span标签，用v-on将add和sub分别绑定+,-
                累加的逻辑：小于10累加，否则提示；递减的逻辑：大于0递减，否则提示
  创建Vue实例时：el（挂载点），data（数据），methods(方法)

7.Vue指令：
  v-show根据表达值的真假，切换元素的显示和隐藏状态，原理是修改元素的diaplay来实现显示和隐藏
  指令后面的内容，最终都会解析为布尔值，值为true元素显示，为false元素隐藏，
  数据改变之后，对应的元素的显示状态会同步更新。
  v-if是根据表达式的真假切换元素的显示状态，本质是通过操纵dom元素来切换显示状态
  表达式的值为true，元素存在于dom树中，为false，从dom树中移除
  频繁的切换用v-show，反之v-if，前者的切换消耗小。
  v-bind设置元素的属性，如：src，title，class，完整写法v-bind:属性名=表达式，
  简写的话可以直接省略v-bind，只保留：属性名=表达式。

  案例（图片切换）：

8.Vue指令：
  v-for根据数据生成列表结构，v-for="（item,index) in 数据",(in是关键字不能改),
  item和 index可以结合其他指令一起使用，数组经常和v-for结合使用，
  数组的长度的更新会同步到页面上，是响应式的
  v-on指令补充：事件绑定的方法写成函数调用的形式，可以传入自定义的参数
  定义方法时需要定义形参来接收传入的实参，事件的后面跟上.修饰符可以对事件进行限制
  .enter可以限制触发的按键为回车，事件修饰符有多种
  v-modle用来便捷的获取和设置表单元素的值，绑定的数据和表单元素的值向关联。

9.Vue网络应用，axios功能强大的网络请求库：必须要首先要打包
  <!-- 官网提供的 axios 在线地址 -->
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  导入axios之后，会在页面上注册一个全局的axios对象，通过它就可以发送请求了
 
  两种方式发送对应的请求：
    axios.get(地址?查询字符串).then(function(reponse){},function(err){})
    查询字符串格式：key=value&key2=value2  
    axios.post(地址,参数对象).then(function(reponse){},function(err){})
    参数对象格式：{key:value,key2:value2}
    
    key由接口文档提供，value是具体传输的数据
    then方法中的回调函数会在请求成功或失败时触发，
    通过回调函数的形参可以获取响应的内容或错误信息
 
  除了要有网络请求库，还要有接口
  
  





                 
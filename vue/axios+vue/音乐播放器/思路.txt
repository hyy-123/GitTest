1.歌曲搜索：按下回车（v-on，enter），查询数据（axios接口，v-model获取输入的内容
  ），渲染数据（ 列表的结构采用v-for指令结合一个数组，回调函数里this改变，要使用that）
  服务器返回的数据比较复杂时，获取的时候注意层级结构；
  通过审查元素快速定位到需要操纵的元素。
2.歌曲播放：点击播放（v-on)，歌曲地址获取（接口调用，歌曲id），歌曲地址设置（本质是设置src属性：v-bind
  ，同时data中要设置歌曲地址的属性，每次查询到数据，将返回的结果设置给data中的属性，那么绑定src的地方就会同步更新）
  歌曲id依赖歌曲搜索的结果，对于不同的数据也需要关注
3.歌曲封面：点击播放（增加封面获取逻辑），歌曲封面获取（接口调用，歌曲id），歌曲封面设置（v-bind)，
  在vue中通过v-bind操纵属性
4.歌曲评论：点击播放（增加评论获取逻辑），歌曲评论获取（接口调用,歌曲id歌曲评论   渲染（v-for渲染一个列表结构)
  在vue中通过v-for生成列表
5.播放动画：核心是增删类名，监听音乐播放（v-on play），监听音乐暂停（v-on pause），操纵类名（v-bind的对象写法使    动画动起来，要在data中增加一个布尔值）
  audio标签的play事件会在音频播放的时候触发，audio标签的pause事件会在音频暂停的时候触发
  通过对象的方式设置类名，类名的生效与否取决于后面值的真假。
6.mv播放：mv图标显示（根据某些条件决定元素的显示状态使用v-show或v-if，这里不需要频繁更换状态，所以用v-if）
  mv地址获取（v-on，接口调用，mvid为0表示没有mv），
  遮罩层（它的显示与隐藏改变的是样式，使用v-show，v-on），
  设置mv地址（即改变src属性，使用v-bind）。
  不同的接口需要的数据是不同的，文档的阅读需要仔细
  页面结构复杂之后，通过审查元素的方式快速定位相关元素
  响应式的数据需要定义在data中。